body{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin:5%;

}

    /* 
    Perspective is the big player in  
    3d space, as it controls the depth plane
    this effectively allows the Z axis to 
    take the role of distance from the screen

    The value determines the distance from
    the objects plane, or the perspective strength

    the bigger the value
    the further we are from the object

    the smaller the value, 
    the more noticeable the perspective will be
    */
.transforms{
    display: flex;
}
.test1{
    perspective:200px;
    div{
        width: 80px;
        height: 80px;
        background-color: skyblue;
    }
    .zoomed{
        background-color: pink;
        animation: moveOnZ 2s infinite ease-in-out alternate;

    }
    .rotated{
        background-color: blueviolet;
        animation: rotateOnY 4s infinite linear;
    }
    
}
.rotate-around-div{
    perspective: 200px;
    div{
        width: 80px;
        height: 80px;
    }
    .rotated-around{
    background-color: brown;
    transform: rotateY(90deg);
    animation: moveSquare 4s infinite ease-in-out alternate;
    }

}

.rotate-around-div > .containerB{
    perspective: 100px;
    animation: moveOrigin 4s infinite ease-in-out alternate;
    >.rotate-around-origin{
        background-color: brown;
        transform: rotateY(90deg);
}}

/* So perspective determines the depth perspective
for the parent container to it's children. */

/* Keep in mind the order in which transformations
are made is important, transformations are applied
from left to right in the written order.
So rotating then moving can have a different
result than moving then rotating. */

.test3{
    width: 200px;
    perspective: 400px;
    >.rotatethentranslate{
        background-color: chartreuse;
        animation: rotatethentranslate 4s infinite linear
    }
}


/* 
Now for the big one, putting it all together
THE CUBE 
*/

/* Parent container, holding perspective */
.container{
    width: 400px;
    height: 400px;
    border: 2px solid white;
    border-radius: 4px;
    display:flex;
    justify-content: center;
    align-items: center;
    perspective: 1000px;
    perspective-origin: top left;
}

/* child elements */
.cube{
    /* overwrite body margin */
    margin:0;
    position:relative;
    width: 200px;
    height: 200px;
    /* prevent flattening */
    transform-style:preserve-3d;
    animation: cubeRotate 10s linear infinite;
}

/* cube sides, absolutely positioned */
.side{
    position:absolute;
    width: 100%;
    height: 100%;
    opacity: 0.9;
    border: 2px solid white;
}
/* Background colors for the cube's sides to help visualize the work */
/*  transform the sides in 3d space
notice how we rotate first, then move on the 
objects relative Z axis
*/
.front { 
    background-color: #d50000; 
    text-align: center;
    font-size: 150px;
    transform:translateZ(100px)
}
.back { background-color: #aa00ff; 
    transform: translateZ(-100px)}

.left { background-color: #304ffe; 
    transform:rotateY(90deg) translateZ(100px)}
.right { background-color: #0091ea; 
    transform:rotateY(-90deg) translateZ(100px)}

.top { background-color: #00bfa5; 
    transform:rotateX(-90deg) translateZ(100px)}
.bottom { background-color: #64dd17; 
    transform:rotateX(90deg) translateZ(100px)}

/* Transitions below */

.transition1-test>button{
    border: 1px solid black;
    border-radius: 5px;
    padding:2% 5% 2% 5%;
    background-color: white;
    color: white;
    transition: .5s ease-out 0.25s;


}
.transition1-test>p{
    transition:.5s cubic-bezier(0.175, 0.885, 0.32, 1.275)
}
.transition1-test>button:hover{
    background-color: black;
    cursor:pointer;
    /* Keep in mind transforming during a transition
    is a stacking context, not very performant */
    transform:rotate(220deg);
}
.transition1-test>button:focus{
    background-color: yellow;
    /* Keep in mind transforming during a transition
    is a stacking context, not very performant */
    transform:rotate(-20deg);
}
.transition1-test>p:hover{
    color: pink;
    background-color: #64dd17;
    scale: 300%;
    rotate:-80deg;
    width:300px
}
.ball {
    font-size: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 25px;
    width: 30px;
    height: 30px;
    background: #c00;
    position: absolute;
    top: 0;
    left: 0;
    transition: transform 1s;
    animation-duration: .2s;
    animation-name: change-color;
    animation-iteration-count: infinite;
    animation-direction:alternate

  }
  /* animations course */
  .animation1{
    display: flex;
    gap: 10px;

  }
  
.balls1{
    width: 100px;
    height: 100px;
    background-color: red;
    border: 1px solid black;
    border-radius: 50%;

}
.ball1{
   /* actual animation properties */
   animation-duration: 2s;
   animation-name:change-color;
   animation-iteration-count: infinite;
   animation-direction: alternate;
}
.ball2{
    /* actual animation properties */
    animation-duration: 1s;
    animation-name:change-color;
    animation-iteration-count: infinite;
    animation-direction: alternate;
 }
 .ball3{
    /* actual animation properties */
    animation-duration: 2s;
    animation-name:change-color;
    animation-iteration-count: infinite;
    animation-direction: alternate-reverse;
 }
 .ball4{
    /* shorthand notation */
    animation: 2s change-color-and-size infinite alternate
 }


 /* Varying version of same animation
 using custom CSS properties. */
.bouncies{
   display: flex;
   border-bottom: 20px solid black;
   margin-top: 20px;

}
.bouncy{
    animation: bounce 300ms alternate infinite cubic-bezier(.2, .65, .6, 1)

}
.bouncy.one{
    --bounce-offset: 20px;
    animation-duration: 200ms;
}
.bouncy.two{
    --bounce-offset:30px;
    animation-duration: 300ms;
}
.bouncy.three{
    --bounce-offset:40px;
    animation-duration: 400ms;
}
.animations{
    display: flex;
    gap: 50px;
    >.animation2{
        display:flex;
    }
}

 .slideinBox{
    width: 200px;
    height: 200px;
    background-color: violet;
    font-size: 100px;
    transform: rotateZ(90deg);
    text-align: center;
 }
 .slidein{
    animation-duration: 3s;
    animation-name: slidein;
    >p{margin: 0;}
 }

 .welcome-sign{
    font-size: larger;
    font-weight: 900;
    width: 500px;
    height: 50px;
    background-color: silver;
    border: 2px solid black;
    border-radius: 10px;
    text-align: center;
    transform-origin: right;
    

 }
 .slide-in-sign{
    animation: slidein2 1000ms;
    animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);
    animation-fill-mode: forwards
 }
 .spinny{
    width: 30px;
    height:30px;
    animation:spin 2000ms;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
 }
/* animation course */
@keyframes change-color{
    from{
        background-color: red;

    }
    to{background-color: green;}
}

@keyframes change-color-and-size {
    from{
        background-color: green;

    }
    50%{
        width: 200px;
        height: 200px;
        background-color: blue;
    }
    to{
        background-color: yellow;
    }
    
}
@keyframes bounce {
from {transform: translateY(0px)}
/* Using custom CSS properties and calc to create re-usable animations! */
to{transform: translateY(calc(var(--bounce-offset) * -1));}    
}
@keyframes slidein {
    from{
        margin-left: 500%;
        font-size: 0px;
    }
    75%{
        font-size: 150px;
        margin-left: 200;
    }
    to{
        margin-left: 0%;
    }   
}
@keyframes slidein2 {
    from{transform: translateY(-200%) rotate(20deg);}
    98%{ transform: rotate(-20deg)}
    to{transform: translateY(0%) rotate(-20deg)}
    
}
@keyframes spin {
    0%{
        transform:rotate(0turn)
    }
    25%{
        transform: rotate(1turn) scale(1)
    }
    50%{
        transform: rotate(1turn) scale(1.5);
    }
    75%{
        transform: rotate(0turn) scale(1.5);
    }
    100%{
        transform:rotate(0turn) scale(1);
    }
    
}
/* 
Here are all the animations used throughout
*/
/* cube */
@keyframes cubeRotate{
    from{transform: rotateY(0deg) rotateX(720deg) rotateZ(0deg) translate3d(220px, -220px, 220px)}
    to{transform: rotateY(360deg) rotateX(0deg) rotateZ(360deg) translate3d(-220px, 220px, -220px)}
}
/* test1 */
@keyframes moveOnZ{
    from{
        transform: translateZ(-50px)
    }
    to{
        transform:translateZ(50px)
    }
}
@keyframes rotateOnY{
    to{
        transform: rotateY(360deg);
    }
}

/* test2 */
@keyframes moveSquare{
    from{
        transform: translateX(-100px) rotateY(90deg)
    }
    to{
        transform: translateX(100px) rotateY(90deg)
    }
}
@keyframes moveOrigin{
    from{
        perspective-origin: left;
    }
    to{
        perspective-origin: right;
    }
}
/* test3 */
@keyframes rotatethentranslate{
    from{
        transform: rotateX(0deg) translateY(120px) ;
    }
to{
    transform:rotateX(360deg) translateY(120px) ;
}
}